import os
import numpy as np
from keras.models import load_model
import logging
from rich.logging import RichHandler
import pefile

# Logging configuration
logging.basicConfig(level=logging.INFO, format="%(message)s", handlers=[RichHandler()])
logger = logging.getLogger("analyzer")

# Paths
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
MODEL_PATH = os.path.join(BASE_DIR, 'model_trained', 'final_model.keras')

# Load the trained model
model = load_model(MODEL_PATH)

NUMBER_OF_FEATURES = 130

def extract_features(file_path):
    """
    Extracts the main characteristics of a file for malware analysis.

    Args:
        file_path (str): The file path for trait extraction.

    Returns:
        np.ndarray: An array of extracted characteristics.
    """
    try:
        pe = pefile.PE(file_path)
        features = []

        features.append(pe.FILE_HEADER.Machine)
        features.append(pe.FILE_HEADER.SizeOfOptionalHeader)
        features.append(pe.FILE_HEADER.Characteristics)
        features.append(pe.OPTIONAL_HEADER.Magic)
        features.append(pe.OPTIONAL_HEADER.AddressOfEntryPoint)
        features.append(pe.OPTIONAL_HEADER.ImageBase)
        features.append(pe.OPTIONAL_HEADER.SectionAlignment)
        features.append(pe.OPTIONAL_HEADER.FileAlignment)
        features.append(pe.OPTIONAL_HEADER.MajorOperatingSystemVersion)
        features.append(pe.OPTIONAL_HEADER.SizeOfImage)
        features.append(pe.OPTIONAL_HEADER.Subsystem)

        if len(features) < NUMBER_OF_FEATURES:
            features.extend([0] * (NUMBER_OF_FEATURES - len(features)))

        return np.array(features[:NUMBER_OF_FEATURES])
    except Exception as e:
        logger.error(f"Error extracting features: {e}")
        return None

def preprocess_features(features):
    # Implement feature preprocessing logic here
    return features

def analyze_malware(file_path):
    # Extract features from the file
    features = extract_features(file_path)
    
    if features is None:
        logger.error("Failed to extract features from the file.")
        return [{"type": "error", "message": "Failed to extract features from the file."}]
    
    # Preprocess the features
    features = preprocess_features(features)
    
    # Predict using the model
    prediction = model.predict(np.array([features]))[0][0]
    confidence = prediction * 100
    
    logger.info(f"Prediction: {prediction}, Confidence: {confidence}%")
    
    if prediction > 0.5:
        return [{"type": "result", "message": f"The file is likely malware with {confidence:.2f}% confidence."}]
    else:
        return [{"type": "result", "message": f"The file is likely not malware with {100 - confidence:.2f}% confidence."}]

if __name__ == "__main__":
    import sys

    if len(sys.argv) < 2:
        print(f"Usage: {sys.argv[0]} <file_path>")
        sys.exit(1)
    for progress in analyze_malware(sys.argv[1]):
        if isinstance(progress, dict) and progress["type"] == "result":
            print(progress["message"])
        else:
            print(progress)